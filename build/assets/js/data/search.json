[
  
  {
    "title": "How to control Franka Panda by ROS",
    "url": "/posts/ros-franka/",
    "categories": "Tutorial",
    "tags": "ROS, Franka",
    "date": "2023-01-06 14:10:00 +0800",
    





    
    "snippet": "导言franka_ros是Ros controller框架下一套通讯控制接口，用户需要编写自己的controller类，继承franka_ros提供的接口(franka_hw::  )来实现传感器读取和控制。Ros controller的相关资料https://zhuanlan.zhihu.com/p/433214417https://blog.csdn.net/gongdiwudu/art...",
    "content": "导言franka_ros是Ros controller框架下一套通讯控制接口，用户需要编写自己的controller类，继承franka_ros提供的接口(franka_hw::  )来实现传感器读取和控制。Ros controller的相关资料https://zhuanlan.zhihu.com/p/433214417https://blog.csdn.net/gongdiwudu/article/details/124153274关于franka_ros的相关资料官方FCL文档(可以看有哪些接口，但没有技术细节)http://www.franka.cn/FCI/franka_ros.html#franka-hwfranka_hw技术文档http://docs.ros.org/en/kinetic/api/franka_hw/html/annotated.html关于libfranka的相关资料franka_ros是在libfranka的基础上做了一层封装，实际可以通过c++直接对机械臂进行控制，建议大概看一下libfranka，了解机械臂的控制架构。http://www.franka.cn/FCI/libfranka.html下面以显扬科技的末端笛卡尔坐标位置控制的示例代码(cartesian_pose_example_controller.cpp),借助显扬科技原有的包文件，讲解如何实现自己的控制器。一、编写my_controller.cpp源码为了管理，在.h文件中声明变量，在.cpp文件中写核心代码，为了便于讲解这里合并到一起，实际也可以只写一个.cpp文件，在/src文件夹下创建my_controller.cpp。1.1 头文件部分这一部分建议参考示例代码引用，关于向量、矩阵等库不做讲解。重点关注franka_hw，首先确定自己需要获得什么传感器数据，做哪个层级的控制，然后在技术文档里查看相关接口被包含于哪个头文件。机械臂有四种控制模式，分别是关节位置控制|关节速度控制|末端位置控制|末端速度控制，同一时间只选择一种模式，并且可以直接对关节力矩进行控制(力控，可选项，不编写就是官方自带的控制方式)。如果我们想对关节角度进行控制，可以引用ros control官方的头文件hardware_interface/joint_command_interface.h，因为电机接口(转速、转角)是通用的，而机械臂的功能接口不统一，是由各个厂家自己编写的。本示例代码对机械臂末端位置进行控制，并且希望得到机械臂初始角度数据，查看文档之后，确定我们的类需要继承两个接口(interface)FrankaPoseCartesianInterface和FrankaStateInterface，分别包含于franka_cartesian_command_interface.h和franka_state_interface.h之中。#include &lt;cmath&gt;#include &lt;array&gt;#include &lt;memory&gt;#include &lt;mutex&gt;#include &lt;vector&gt;#include &lt;stdexcept&gt;#include &lt;string&gt;#include &lt;ros/ros.h&gt;#include &lt;ros/time.h&gt;#include &lt;ros/node_handle.h&gt;#include &lt;geometry_msgs/Vector3.h&gt;#include &lt;controller_interface/controller_base.h&gt;#include &lt;controller_interface/multi_interface_controller.h&gt;#include &lt;franka_hw/franka_state_interface.h&gt;#include &lt;franka_hw/franka_cartesian_command_interface.h&gt;#include &lt;hardware_interface/hardware_interface.h&gt;#include &lt;hardware_interface/robot_hw.h&gt;#include &lt;pluginlib/class_list_macros.h&gt;1.2 整体架构我们需要在一个命名空间之下，声明MyController，继承我们需要的传感器和控制接口，在私有属性中声明传感器和控制的handler(具体见init部分和update部分源码)。然后实现controller_interface的init、starting、update三个方法。init方法在MyController被加载的时候会调用，在这之中我们需要初始化一些变量。starting是MyController在启动/重启时会被调用一次，做一些类似初始化的事情。update将会在每个控制周期内执行一次，也就是程序的主循环，核心代码放于此处。ros control整体框架围绕这三个方法展开，我们只需要编写算法即可，具体怎么执行是ROS负责的。最后在命名空间外，将MyController导出。/*头文件部分*/namespace franka_hit_controllers_ns {//命名空间可以随便起名，建议以controllers_ns结尾class MyController : public controller_interface::MultiInterfaceController&lt;franka_hw::FrankaPoseCartesianInterface,franka_hw::FrankaStateInterface&gt; { public:  bool init(hardware_interface::RobotHW* robot_hardware, ros::NodeHandle&amp; node_handle) override;  void starting(const ros::Time&amp;) override;  void update(const ros::Time&amp;, const ros::Duration&amp; period) override; private:  franka_hw::FrankaPoseCartesianInterface* cartesian_pose_interface_;  std::unique_ptr&lt;franka_hw::FrankaCartesianPoseHandle&gt; cartesian_pose_handle_;  ros::Duration elapsed_time_;  std::array&lt;double, 16&gt; initial_pose_{};//satrt pose  std::array&lt;double, 16&gt; new_pose;//the last pose  ros::Subscriber sub_equilibrium_pose_;//subscriber for topic moveXYZ  void moveXYZCallback(const geometry_msgs::Vector3::ConstPtr&amp; msg);  std::mutex pose_mutex;  bool reached=true;//reach the target position  std::vector&lt;double&gt; vectorXYZ;//the distance for XYZ  double run_time = 0.0;                                                            };//MyController类声明结束//编写三个方法bool MyController::init(hardware_interface::RobotHW* robot_hardware, ros::NodeHandle&amp; node_handle){}void MyController::starting(const ros::Time&amp; /* time */) {}void MyController::update(const ros::Time&amp; /* time */,const ros::Duration&amp; period){}}//命名空间结束PLUGINLIB_EXPORT_CLASS(franka_hit_controllers_ns::MyController,                       controller_interface::ControllerBase)//注册类，不需要加分号1.3 init部分编写init方法有两个参数，第一个robot_hardware用于获取相关的接口，第二个node_handle用于发布订阅话题、获得我们再外部yaml文件中定义的参数。首先需要通过robot_hardware的get方法拿到相关接口interface，然后通过interface的gethandle方法拿到控制和读数据所需要的句柄(handle)。只有通过handle的方法我们才能读取数据或者是控制，所以我们需要声明相关的handler变量，在此处赋值，在update()中使用。my_controller:    type: franka_hit_controllers_ns/MyController    arm_id: pandabool MyController::init(hardware_interface::RobotHW* robot_hardware,ros::NodeHandle&amp; node_handle) {  vectorXYZ.resize(3,0.0);  //拿到FrankaPoseCartesianInterface接口  cartesian_pose_interface_ = robot_hardware-&gt;get&lt;franka_hw::FrankaPoseCartesianInterface&gt;();  if (cartesian_pose_interface_ == nullptr) {    ROS_ERROR(        \"CartesianPoseExampleController: Could not get Cartesian Pose \"        \"interface from hardware\");    return false;  }    //订阅moveXYZ话题，moveXYZCallback是获得话题数据后执行的回调函数  sub_equilibrium_pose_ = node_handle.subscribe(\"/moveXYZ\", 20, &amp;CartesianPoseExampleController::moveXYZCallback, this);  //getParam拿到了yaml文件中的arm_id，也就是panda(单臂默认为panda，多臂才会给不同id)  std::string arm_id;  if (!node_handle.getParam(\"arm_id\", arm_id)) {    ROS_ERROR(\"CartesianPoseExampleController: Could not get parameter arm_id\");    return false;  }  //通过FrankaPoseCartesianInterface接口,使用getHandle()  //得到了标识为“arm_id_robot”的机械臂的FrankaCartesianPoseHandle  try {    cartesian_pose_handle_ = std::make_unique&lt;franka_hw::FrankaCartesianPoseHandle&gt;(        cartesian_pose_interface_-&gt;getHandle(arm_id + \"_robot\"));  } catch (const hardware_interface::HardwareInterfaceException&amp; e) {    ROS_ERROR_STREAM(        \"CartesianPoseExampleController: Exception getting Cartesian handle: \" &lt;&lt; e.what());    return false;  }  //得到FrankaStateInterface  auto state_interface = robot_hardware-&gt;get&lt;franka_hw::FrankaStateInterface&gt;();  if (state_interface == nullptr) {    ROS_ERROR(\"CartesianPoseExampleController: Could not get state interface from hardware\");    return false;  }  //得到了标识为“arm_id_robot”的机械臂的FrankaStateHandle  try {    auto state_handle = state_interface-&gt;getHandle(arm_id + \"_robot\");    //panda默认的起始姿态    std::array&lt;double, 7&gt; q_start{{0, -M_PI_4, 0, -3 * M_PI_4, 0, M_PI_2, M_PI_4}};    for (size_t i = 0; i &lt; q_start.size(); i++) {    //通过handle的getRobotState()方法读取状态，建议看技术文档得知更多细节！！！      if (std::abs(state_handle.getRobotState().q_d[i] - q_start[i]) &gt; 0.1) {        ROS_WARN(\"please make sure the robot does not crash into something \");      }    }  } catch (const hardware_interface::HardwareInterfaceException&amp; e) {    ROS_ERROR_STREAM(        \"CartesianPoseExampleController: Exception getting state handle: \" &lt;&lt; e.what());    return false;  }  return true;}1.4 starting部分编写在启动时被自动调用一起，之后可能会复位重启，也会被调用，参考示例代码可以将一些初始化赋值放在此处。void MyController::starting(const ros::Time&amp; /* time */) {  initial_pose_ = cartesian_pose_handle_-&gt;getRobotState().O_T_EE_c;  new_pose = initial_pose_;  elapsed_time_ = ros::Duration(0.0);  }1.5 update部分编写对算法不做讲解，主要关注如何发布控制指令。在前文我们获得了对末端位置进行控制的handle，我们可以通过setCommand发布指令。void MyController::update(const ros::Time&amp; /* time */,                                            const ros::Duration&amp; period) {    pose_mutex.lock();    if (reached == true)    {      cartesian_pose_handle_-&gt;setCommand(new_pose);      //ROS_INFO(\"please dont wait robot reach the target position\");       pose_mutex.unlock();        return;    }   elapsed_time_ += period;  //double radius = 0.2;  //reached = false;  if(elapsed_time_.toSec()&gt;run_time)  {    reached = true;    //发布控制指令!!!    cartesian_pose_handle_-&gt;setCommand(new_pose);    pose_mutex.unlock();    return ;  }  double angle = M_PI / 4 * (1 - std::cos(M_PI / run_time * elapsed_time_.toSec()));    double delta_x = vectorXYZ[0] * std::sin(angle);  double delta_y = vectorXYZ[1] * std::sin(angle);  double delta_z = vectorXYZ[2] * std::sin(angle);  new_pose = initial_pose_;  new_pose[12] += delta_x;  new_pose[13] += delta_y;  new_pose[14] += delta_z;  //std::cout&lt;&lt;\"the new pose[14] is \"&lt;&lt;new_pose[14]&lt;&lt;std::endl;  cartesian_pose_handle_-&gt;setCommand(new_pose);  pose_mutex.unlock();}二、编译2.1 生成插件描述文件MyController相当于一个插件，需要使用在包文件下新建一个.xml文件进行描述，此处只需要在原有文件内新增文本。&lt;library path=\"lib/libfranka_hinyeung_controllers\"&gt;.....  &lt;class name=\"franka_hinyeung_controllers/MyController\" type=\"franka_hit_controllers_ns::MyController\" base_class_type=\"controller_interface::ControllerBase\"&gt;      &lt;description&gt;          my first controller!      &lt;/description&gt;  &lt;/class&gt;.....&lt;/library&gt;2.2 修改package.xml文件将插件描述文件加入工程，这一部分不用做，但需要了解。  &lt;export&gt;    &lt;controller_interface plugin=\"${prefix}/franka_hinyeung_controllers_plugin.xml\"/&gt;  &lt;/export&gt;2.3 修改CMakeList.txt文件add_library(franka_hinyeung_controllers    src/my_controller.cpp)2.4 修改yaml文件在config/franka_hinyeung_controllers.yaml文件中添加如下文本my_controller:    type: franka_hinyeung_controllers/MyController    arm_id: panda2.5 新建launch文件建议熟读launch文件，学习需要启动那些文件。在launch文件夹下复制一份cartesian_pose_example_controller.launch文件，改名为my_controller.launch文件然后将其中的args=”cartesian_pose_example_controller”换成args=”my_controller”。2.6 编译在workspace下开启终端输入catkin_make指令进行编译。然后就可以通过roslaunch调用my_controller.launch文件启动程序，控制机械臂末端位置了。"
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 11:33:00 +0800",
    





    
    "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 ...",
    "content": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then  echo \"The command was not successful.\";  #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\"MathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.VideoReverse Footnote            The footnote source &#8617;              The 2nd footnote source &#8617;      "
  }
  
]

